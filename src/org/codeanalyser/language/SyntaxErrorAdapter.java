package org.codeanalyser.language;

import java.util.ArrayList;
import java.util.BitSet;
import org.antlr.v4.runtime.ANTLRErrorListener;
import org.antlr.v4.runtime.Parser;
import org.antlr.v4.runtime.RecognitionException;
import org.antlr.v4.runtime.Recognizer;
import org.antlr.v4.runtime.atn.ATNConfigSet;
import org.antlr.v4.runtime.dfa.DFA;
import org.codeanalyser.core.analyser.FileAnalyser;

/**
 * An CustomANTLRErrorListener which count the amount of syntax errors
 * that occur in the parser or lexer. We can see if the errors array is empty to
 * determine if any syntax errors occurred.
 * @author Jack Timblin - U1051575
 */
public class SyntaxErrorAdapter implements ANTLRErrorListener {
    
    private final ArrayList<String> errors;
    private final FileAnalyser file;
    
    /**
     * initialises a new SyntaxErrorAdapter
     * @param file the file currently being analysed.
     */
    public SyntaxErrorAdapter(FileAnalyser file) {
        this.errors = new ArrayList<String>();
        this.file = file;
    }
    
    /**
     * gets the syntax errors that occurred while parsing 
     * the file currently being analysed.
     * @return the syntax error message strings.
     */
    public ArrayList<String> getSyntaxErrors() {
        return this.errors;
    }
    
    /**
     * triggered when a syntax error occurs.
     * @param rcgnzr the recogniser used, you can access the context.
     * @param offendingSymbol The offending token in the input token stream.
     * @param line The line number in the input where the error occured.
     * @param charPositionInLine The character position within the line where
     * the error occurred.
     * @param msg the error message.
     * @param e THe exception generated by the parser.
     */
    @Override
    public void syntaxError(Recognizer<?, ?> rcgnzr, Object offendingSymbol,
            int line, int charPositionInLine, String msg, RecognitionException e) {
        this.errors.add("File: "+file.getName() + ", Error: " + msg);
    }
    
    /**
     * triggered when ambiguity occurs.
     * @param parser the parser used, we can access to the context.
     * @param dfa the DFA for the current decision.
     * @param startIndex the input index where the decision started
     * @param stopIndex the input index where the decision stopped
     * @param exact true if the ambiguity is exactly known.
     * @param ambigAlts the potentially ambiguous alts.
     * @param configs the ATN configuration set when the ambiguity was 
     * determined.
     */
    @Override
    public void reportAmbiguity(Parser parser, DFA dfa, int startIndex, int stopIndex,
            boolean exact, BitSet ambigAlts, ATNConfigSet configs) {
    }
    
    /**
     * triggered when attempting full context occurs.
     * @param parser the parser that was used, can access the context.
     * @param dfa the DFA for the current decision.
     * @param startIndex the input index where the decision started
     * @param stopIndex the input index where the decision stopped
     * @param conflictingAlts the specific conflicting alts.
     * @param configs the ATN configuration set when the SLL conflict
     * was detected.
     */
    @Override
    public void reportAttemptingFullContext(Parser parser, DFA dfa, int startIndex,
            int stopIndex, BitSet conflictingAlts, ATNConfigSet configs) {
    }
    
    /**
     * triggered when context sensitivity occurs.
     * @param parser the parser instance.
     * @param dfa the DFA for the current decision.
     * @param startIndex the input index where the decision started
     * @param stopIndex the input index where the decision stopped
     * @param prediction the unambiguous result of the full-context prediction.
     * @param configs the ATN configuration set where the unambiguous prediction
     * was determined.
     */
    @Override
    public void reportContextSensitivity(Parser parser, DFA dfa, int startIndex,
            int stopIndex, int prediction, ATNConfigSet configs) {
    }
    
}
